# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: SonarCloud
    organization: plainconcepts
    projectKey: sgkuclaimantportaladmin
    projectName: 'SGUK Claimant Portal Admin'
    extraProperties: |
     # Additional properties that will be passed to the scanner, 
     # Put one key=value per line, example:
     # sonar.exclusions=**/*.bin
     sonar.exclusions=**/*test*
     sonar.cs.opencover.reportsPaths=**/*coverage.opencover.xml
     sonar.cs.vstest.reportsPaths=**/*.trx
     sonar.coverage.exclusions="**Tests*.cs"

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '2.2.300'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
    feedsToUse: 'select'
    versioningScheme: 'off'

- task: Bash@3
  displayName: 'FunctionalTests'
  inputs:
    targetType: filePath
    filePath: './build-agent.sh'

- script: |
    mkdir $(Build.SourcesDirectory)/results
    sed 's|/src/src|$(Build.SourcesDirectory)/src|g' $(Build.SourcesDirectory)/build/.test-results/coverage.json > $(Build.SourcesDirectory)/results/coverage.json
    dotnet test tests/UnitTests/ --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=\"opencover,cobertura\" /p:MergeWith=$(Build.SourcesDirectory)/results/coverage.json /p:Exclude=\"[xunit.*]*,[*]SGUK.ClaimantPortal.Infrastructure.EfCore.Migrations.*,[*]SGUK.ClaimantPortal.Infrastructure.EfCore.EntityConfigurations.*\"
    cp $(Build.SourcesDirectory)/tests/UnitTests/coverage.cobertura.xml $(Build.SourcesDirectory)/results
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path . --version 4.1.10
    ./reportgenerator "-reports:$(Build.SourcesDirectory)/tests/UnitTests/coverage.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)/results" "-reporttypes:HTML;HTMLSummary"
  displayName: 'UnitTests'

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/*.trx'
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: '**/*.trx'

- task: PublishCodeCoverageResults@1
  inputs:
    summaryFileLocation: $(Build.SourcesDirectory)/results/coverage.cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)/results
    codecoverageTool: cobertura

- task: SonarSource.sonarqube.6D01813A-9589-4B15-8491-8164AEB38055.SonarQubeAnalyze@4
  displayName: 'Run Code Analysis'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: False
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)/portal'
    zipAfterPublish: True
    workingDirectory: src/SGUK.ClaimantPortal.Admin.Host

- task: CopyFiles@2
  displayName: 'Copy Resource Manager templates'
  inputs:
    SourceFolder: src/SGUK.ClaimantPortal.Admin.Arm
    Contents: '*.json'
    TargetFolder: '$(build.artifactstagingdirectory)/arm'
    CleanTargetFolder: true
    OverWrite: true

- task: CopyFiles@2
  displayName: 'Copy Resource Manager scripts'
  inputs:
    SourceFolder: src/SGUK.ClaimantPortal.Admin.Arm
    Contents: '*.ps1'
    TargetFolder: '$(build.artifactstagingdirectory)/arm'
    OverWrite: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Resource Manager templates'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/arm'
    ArtifactName: arm

- task: PublishBuildArtifacts@1
  displayName: 'Publish Claims Portal artifacts'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/portal'
    ArtifactName: portal

- task: SonarSource.sonarqube.291ed61f-1ee4-45d3-b1b0-bf822d9095ef.SonarQubePublish@4
  displayName: 'Publish Quality Gate Result'


